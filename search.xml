<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux下制作系统启动盘</title>
      <link href="/2019/09/30/linux-zhi-zuo-xi-tong-qi-dong-pan/"/>
      <url>/2019/09/30/linux-zhi-zuo-xi-tong-qi-dong-pan/</url>
      
        <content type="html"><![CDATA[<ul><li><p>准备工作   </p><blockquote><ul><li>插入U盘   </li><li>查看U盘设备名称   <pre><code>```sudo fdisk -l```</code></pre></li><li>卸载U盘，例如：<pre><code>```umount /dev/sdb```</code></pre></li><li>格式化U盘   <pre><code>```mkfs.ntfs /dev/sdb1 -I (NTFS分区)mkfs.vfat /dev/sdb1 -I (fat32分区)mkfs.ext4 /dev/sdb1 -I (Linux分区)```</code></pre></li></ul></blockquote></li><li><p>制作U盘启动盘   </p><blockquote><p><code>dd if=镜像目录 of=设备</code></p><pre><code>  ```  sudo dd if=ubuntu-13.10-desktop-i386.iso  of=/dev/sdb status=progress   ```</code></pre></blockquote></li><li><p>引申应用   </p><blockquote><p>制作 CD/DVD 系统盘</p><pre><code>  ```  sudo dd if=ubuntu-13.10-desktop-i386.iso  of=/dev/cdrom status=progress   ```</code></pre><p>制作镜像</p><pre><code>  ```  sudo dd if=/dev/cdrom of=/home/username/cd.iso status=progress   ```</code></pre></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fortran 语法简易说明</title>
      <link href="/2019/09/25/fortran-yu-fa-jian-yi-shuo-ming/"/>
      <url>/2019/09/25/fortran-yu-fa-jian-yi-shuo-ming/</url>
      
        <content type="html"><![CDATA[<h1 id="一般说明"><a href="#一般说明" class="headerlink" title="一般说明"></a>一般说明</h1><ol><li>字符集   <blockquote><ul><li>英文26个字母，不区分大小写   </li><li>数字0-9   </li><li>22个特殊符号<code>:=+-*/(),.&#39;!&quot;%&amp;;&lt;&gt;?$_空格</code></li></ul></blockquote></li><li>书面格式   <ul><li>Fortran程序以<code>PROGRAM 程序名</code>开始，以<code>END</code>结束</li><li>固定格式   <blockquote><ul><li>第1个字符，<code>C</code>或<code>c</code>或<code>*</code>,代表此行为注释   </li><li>第1-5个字符，数字或空格，数字代表行号   </li><li>第6个字符，<code>0</code>以外的任何字符代表此行承接上一行   </li><li>第7-72个字符，代码正文   </li><li>第73个字符以后，无效，自动忽略   </li></ul></blockquote></li><li>自由格式   <blockquote><ul><li>叹号<code>!</code>以后均为注释   </li><li>行号直接放到最前面   </li><li>行尾或行首为符号<code>&amp;</code>，代表此行和下一行或上一行承接   </li><li>每行可编写132个字符   </li></ul></blockquote></li></ul></li><li>数据类型   <ul><li>整型   <blockquote><ul><li>长整型（4bytes）：-2147483648<del>+2147483647， 或-2E31+1</del>+2E31   </li><li>短整型（2bytes）：-32768<del>+32767，或-2E15+1</del>2E15   </li></ul></blockquote></li><li>浮点型   <blockquote><ul><li>单精度（4bytes）：有效位数6-7位   </li><li>双精度（8bytes）：有效位数15-16位   </li></ul></blockquote></li><li>复数   <blockquote><p>a+bi, 以浮点数记录实部与虚部，同样分为单精度与双精度   </p></blockquote></li><li>字符（串）   </li><li>逻辑判断   <blockquote><p>true(1), false(0)   </p></blockquote></li></ul></li><li>数学表达式<blockquote><p>加（+），减（-），乘（<em>），除（/），乘幂（*</em>）   </p></blockquote></li></ol><h1 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h1><ol><li><p>整型声明   </p><ul><li>长整型   <pre class="line-numbers language-fortran"><code class="language-fortran">  <span class="token keyword">integer</span><span class="token punctuation">(</span><span class="token keyword">kind</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span> a    <span class="token comment" spellcheck="true">!Fortran90添加</span>  <span class="token keyword">integer</span><span class="token operator">*</span><span class="token number">4</span> a   <span class="token comment" spellcheck="true">!Fortran77写法</span>  <span class="token keyword">integer</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> a   <span class="token comment" spellcheck="true">!Fortran77写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>短整型   <pre class="line-numbers language-fortran"><code class="language-fortran">  <span class="token keyword">integer</span><span class="token punctuation">(</span><span class="token keyword">kind</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> a    <span class="token comment" spellcheck="true">!Fortran90添加</span>  <span class="token keyword">integer</span><span class="token operator">*</span><span class="token number">2</span> a   <span class="token comment" spellcheck="true">!Fortran77写法</span>  <span class="token keyword">integer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> a   <span class="token comment" spellcheck="true">!Fortran77写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>一般情况，编译器默认使用长整型   </p></blockquote></li></ul></li><li><p>浮点型   </p><ul><li>单精度   <pre class="line-numbers language-fortran"><code class="language-fortran">  <span class="token keyword">real</span><span class="token punctuation">(</span><span class="token keyword">kind</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span> a    <span class="token comment" spellcheck="true">!Fortran90添加</span>  <span class="token keyword">real</span><span class="token operator">*</span><span class="token number">4</span> a   <span class="token comment" spellcheck="true">!Fortran77写法</span>  <span class="token keyword">real</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> a   <span class="token comment" spellcheck="true">!Fortran77写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>双精度   <pre class="line-numbers language-fortran"><code class="language-fortran">  <span class="token keyword">real</span><span class="token punctuation">(</span><span class="token keyword">kind</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span> a    <span class="token comment" spellcheck="true">!Fortran90添加</span>  <span class="token keyword">real</span><span class="token operator">*</span><span class="token number">8</span> a   <span class="token comment" spellcheck="true">!Fortran77写法</span>  <span class="token keyword">real</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> a   <span class="token comment" spellcheck="true">!Fortran77写法</span>  <span class="token keyword">Double Precision</span> a    <span class="token comment" spellcheck="true">!Fortran77写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>所有浮点数在计算机中均以科学计数法存储，单精度以<code>E</code>表示，双精度以<code>D</code>表示，例如<code>3.3e0</code>，<code>3.5d0</code>      </li><li>不指定长度默认使用单精度   </li><li>数字写成<code>3.3e0</code>或<code>3.5d0</code>表示强制使用单精度或双精度</li></ul></blockquote></li></ul></li><li><p>复数   </p><ul><li>单精度   <pre class="line-numbers language-fortran"><code class="language-fortran">  <span class="token keyword">complex</span><span class="token punctuation">(</span><span class="token keyword">kind</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span> a    <span class="token comment" spellcheck="true">!Fortran90添加</span>  <span class="token keyword">complex</span><span class="token operator">*</span><span class="token number">4</span> a   <span class="token comment" spellcheck="true">!Fortran77写法</span>  <span class="token keyword">complex</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> a   <span class="token comment" spellcheck="true">!Fortran77写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>双精度   <pre class="line-numbers language-fortran"><code class="language-fortran">  <span class="token keyword">complex</span><span class="token punctuation">(</span><span class="token keyword">kind</span><span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span> a    <span class="token comment" spellcheck="true">!Fortran90添加</span>  <span class="token keyword">complex</span><span class="token operator">*</span><span class="token number">8</span> a   <span class="token comment" spellcheck="true">!Fortran77写法</span>  <span class="token keyword">complex</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> a   <span class="token comment" spellcheck="true">!Fortran77写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>赋值是使用<code>a=(x,y)</code>, x为实部，y为虚部   </p></blockquote></li></ul></li><li><p>字符（串）   </p><ul><li>声明方式   <pre class="line-numbers language-fortran"><code class="language-fortran">  <span class="token keyword">character</span> a   <span class="token comment" spellcheck="true">!不指定长度</span>  <span class="token keyword">character</span><span class="token punctuation">(</span>len<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span> a   <span class="token comment" spellcheck="true">!Fortran90添加</span>  <span class="token keyword">character</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> a   <span class="token comment" spellcheck="true">!Fortran77写法</span>  <span class="token keyword">character</span><span class="token operator">*</span><span class="token number">10</span> a   <span class="token comment" spellcheck="true">!Fortran77写法</span>  <span class="token keyword">character</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>d a   <span class="token comment" spellcheck="true">!Fortran77写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Fortran90赋值字符串用单引号双引号均可，Fortran77只能使用单引号。   </p></blockquote></li></ul></li><li><p>逻辑变量   </p><ul><li>长型   <pre class="line-numbers language-fortran"><code class="language-fortran">  <span class="token keyword">logical</span><span class="token punctuation">(</span><span class="token keyword">kind</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span> a    <span class="token comment" spellcheck="true">!Fortran90添加</span>  <span class="token keyword">logical</span><span class="token operator">*</span><span class="token number">4</span> a   <span class="token comment" spellcheck="true">!Fortran77写法</span>  <span class="token keyword">logical</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> a   <span class="token comment" spellcheck="true">!Fortran77写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>短型   <pre class="line-numbers language-fortran"><code class="language-fortran">  <span class="token keyword">logical</span><span class="token punctuation">(</span><span class="token keyword">kind</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> a    <span class="token comment" spellcheck="true">!Fortran90添加</span>  <span class="token keyword">logical</span><span class="token operator">*</span><span class="token number">2</span> a   <span class="token comment" spellcheck="true">!Fortran77写法</span>  <span class="token keyword">logical</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> a   <span class="token comment" spellcheck="true">!Fortran77写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>一般情况，不需指定长度，有系统自动分配   </p></blockquote></li></ul></li><li><p>自定义数据类型(Fortran90专有)   </p><ul><li><p>定义   </p><pre class="line-numbers language-fortran"><code class="language-fortran">  <span class="token keyword">type</span> <span class="token operator">::</span> person   <span class="token comment" spellcheck="true">!自定义变量类型为person</span>    <span class="token keyword">character</span><span class="token punctuation">(</span>len<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">::</span> name   <span class="token comment" spellcheck="true">!记录人名</span>    <span class="token keyword">integer</span> <span class="token operator">::</span> age   <span class="token comment" spellcheck="true">!记录年龄</span>    <span class="token keyword">real</span> <span class="token operator">::</span> length   <span class="token comment" spellcheck="true">!记录身高</span>  <span class="token keyword">end type</span> person   <span class="token comment" spellcheck="true">!结束定义</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>赋值   </p><pre class="line-numbers language-fortran"><code class="language-fortran">  <span class="token keyword">type</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token operator">::</span> a   <span class="token comment" spellcheck="true">!声明person类型的变量a</span>  a<span class="token operator">%</span>name <span class="token operator">=</span> <span class="token string">"Mike"</span>   <span class="token comment" spellcheck="true">!给元素name赋值Mike</span>  a<span class="token operator">%</span>age <span class="token operator">=</span> <span class="token number">30</span>   <span class="token comment" spellcheck="true">!给元素age赋值30</span>  a<span class="token operator">%</span>length <span class="token operator">=</span> <span class="token number">174.5</span>   <span class="token comment" spellcheck="true">!给元素length赋值174.5</span>  a<span class="token operator">=</span>person<span class="token punctuation">(</span><span class="token string">"Mike"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">174.5</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">!一次性给所有元素赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>补充说明   </p><ul><li><p>设置默认类型   </p><pre class="line-numbers language-fortran"><code class="language-fortran">  <span class="token keyword">implicit</span> <span class="token keyword">integer</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">!a、b、c开头的变量都为整型</span>  <span class="token keyword">implicit</span> <span class="token keyword">integer</span><span class="token punctuation">(</span>a<span class="token operator">-</span>f<span class="token punctuation">,</span>i<span class="token punctuation">,</span>k<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">!a到f，以及i和k开头的变量都是整型</span>  <span class="token keyword">implicit</span> <span class="token keyword">real</span><span class="token punctuation">(</span>a<span class="token operator">-</span>m<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">!a到m开头的变量都是浮点型</span>  <span class="token keyword">implicit none</span>   <span class="token comment" spellcheck="true">!关闭默认类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>implicit命令必须放在所有声明之前   </li><li>建议在所有程序中使用<code>implicit none</code>命令  </li></ul></blockquote></li><li><p>常数声明   </p><pre class="line-numbers language-fortran"><code class="language-fortran">  <span class="token keyword">real</span> pi  <span class="token keyword">parameter</span><span class="token punctuation">(</span>pi<span class="token operator">=</span><span class="token number">3.14</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">!通用写法</span>  <span class="token keyword">real</span><span class="token punctuation">,</span> <span class="token keyword">parameter</span> <span class="token operator">::</span> pi<span class="token operator">=</span><span class="token number">3.14</span>    <span class="token comment" spellcheck="true">!Fortran90新增</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置变量初值   </p><pre class="line-numbers language-fortran"><code class="language-fortran">  <span class="token keyword">integer</span> <span class="token operator">::</span> a<span class="token operator">=</span><span class="token number">1</span>   <span class="token comment" spellcheck="true">!Fortran90新增</span>  <span class="token keyword">integer</span> b  <span class="token keyword">real</span> c  <span class="token keyword">data</span> b<span class="token punctuation">,</span>c <span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5.6</span><span class="token operator">/</span>   <span class="token comment" spellcheck="true">!传统写法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>等价声明   </p><pre class="line-numbers language-fortran"><code class="language-fortran">  <span class="token keyword">integer</span> a<span class="token punctuation">,</span>b  <span class="token keyword">equivalence</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">!声明a与b等价，即a与b占用同一块内存</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ol><h1 id="输入-输出"><a href="#输入-输出" class="headerlink" title="输入/输出"></a>输入/输出</h1><ol><li><p>输入   </p><pre class="line-numbers language-fortran"><code class="language-fortran"> <span class="token keyword">read</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">)</span> a   <span class="token comment" spellcheck="true">!读取变量a</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li>括号内第一个参数为读取位置，星号为默认值，为键盘   </li><li>括号内第二个参数为读取格式，星号为默认   </li><li>执行完read，系统自动跳到下一行等待输入</li></ul></blockquote></li><li><p>输出   </p><pre class="line-numbers language-fortran"><code class="language-fortran"> <span class="token keyword">write</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">)</span> a   <span class="token comment" spellcheck="true">!输出变量a</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li>括号内第一个参数为输出位置，星号为默认值，为屏幕   </li><li>括号内第二个参数为输出格式，星号为默认   </li><li>执行完write，系统自动跳到下一行等待输出   </li></ul></blockquote></li><li><p>格式化输入输出   </p><pre class="line-numbers language-fortran"><code class="language-fortran"> <span class="token keyword">write</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">,</span>g   <span class="token comment" spellcheck="true">!以行号为100的行中设定的格式输出变量a到屏幕</span> <span class="token number">100</span> <span class="token keyword">format</span><span class="token punctuation">(</span>f15<span class="token number">.10</span><span class="token punctuation">,</span> <span class="token number">2</span>x<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">(</span>f15<span class="token number">.10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span>x<span class="token punctuation">,</span> I4<span class="token punctuation">,</span> <span class="token number">2</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">(</span>f15<span class="token number">.10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">write</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token string">"(f15.10, 2x, 3(f15.10), 2x, I4, 2x, 2(f15.10))"</span><span class="token punctuation">)</span> a   <span class="token comment" spellcheck="true">!直接将格式写在write命令里</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>常用输入输出格式   </p><pre><code> Iw[.m]   !以w个字符输出整数，至少输出m个数字，m可省略 Fw.d   !以w个字符输出浮点数，小数部分占d个字符 Ew.d[Ee]   !用科学计数法，以w个字符输出浮点数，小数部分占d个字符，指数部分最少输出e个数字，e可省略 Dw.d[De]   !与Ew.d[Ee]相同，输出时代表指数的字母为D Aw   !以w个字符宽度输出字符串 nX   !输出位置向右移动n位，留出n个空格 Lw   !以w个字符输出真假值T或F Gw.d[Ee]   !输出所有类型数据，w，d，e含义同上，d不一定用得上，但不能省略，可以随便给个值 /   !换行输出 Tc   !输出位置移动到本行第c个字节 &#39;字符串&#39;   !直接放入要显示的字符串 SP/SS   !SP用来在数字前面显示正负号，SS取消SP BN/BZ   !输入时，BN代表没有数据的字节没有东西，BZ代表没有数据的字节为0，例如：以I5读入数字1，BN读入的数据为1，BZ读入的数据为10000 kP   !自动为读入的浮点数乘以10的k次方</code></pre></li></ol><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><ol><li><p>打开文件   </p><blockquote><p>Fortran可以操作文本文件与二进制文件，访问方式又顺序访问与直接访问两种   </p><pre class="line-numbers language-fortran"><code class="language-fortran"> <span class="token keyword">open</span><span class="token punctuation">(</span>unit<span class="token operator">=</span>number<span class="token punctuation">,</span> <span class="token keyword">file</span><span class="token operator">=</span><span class="token string">'filename'</span><span class="token punctuation">,</span> form<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> access<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> rec<span class="token operator">=</span>length<span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>正整数number代表文件代号，用来带起read、write命令中的输入输出位置（注意：避免使用1/2/5/6，2/6是默认输出屏幕位置，1/5是默认输入键盘位）   </li><li>‘filename’为打开的文件名，可以带路径   </li><li>form代表文件类型，=‘formated’代表文本文件，=‘unformated’代表二进制文件，默认为文本文件     </li><li>access代表文件访问方式，=‘sequential’代表顺序访问，=‘direct’代表直接访问，默认为顺序访问   </li><li>length在顺序访问时代表一次读写数据的最大容量，在直接访问时代表每个模块的分区长度。length在文本文件下单位为1byte，在二进制格式下又编译器指定。   </li><li>blank代表输入数字时，格式字段中的空格代表的意义，=‘null’时代表没有东西，=‘zero’时会自动以0代入。默认为=‘zero’      </li></ul></blockquote></li><li><p>读写文件   </p><pre class="line-numbers language-fortran"><code class="language-fortran"> <span class="token keyword">write</span><span class="token operator">/</span><span class="token keyword">read</span><span class="token punctuation">(</span>unit<span class="token operator">=</span>number<span class="token punctuation">,</span> fmt<span class="token operator">=</span><span class="token keyword">format</span><span class="token punctuation">,</span> nml<span class="token operator">=</span><span class="token keyword">namelist</span><span class="token punctuation">,</span> rec<span class="token operator">=</span>record<span class="token punctuation">,</span> advance<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li>number用来指定输入输出位置   </li><li>format指定输入输出格式   </li><li>namelist指定需要读写的namelist    </li><li>record指定在直接访问文件时要读写的文件位置   </li><li>advance为Fortran90新增，代表命令执行完毕后，读写位置是否自动向下移动一行，=‘yes’代表移动，为默认状态，=‘no’代表不移动   </li></ul></blockquote></li><li><p>NAMELIST   </p><blockquote><p>NAMELIST用来把一组变量封装到一起，使用方法如下:   </p><pre class="line-numbers language-fortran"><code class="language-fortran"> <span class="token keyword">integer</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c <span class="token keyword">namelist</span> <span class="token operator">/</span>nl_name<span class="token operator">/</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c    <span class="token comment" spellcheck="true">!定义NAMELIST，必须放在声明部分</span> <span class="token punctuation">&amp;</span>nl_name a<span class="token operator">=</span><span class="token number">1</span> b<span class="token operator">=</span><span class="token number">2</span> c<span class="token operator">=</span><span class="token number">3</span> <span class="token operator">/</span>   <span class="token comment" spellcheck="true">!给NAMELIST内的变量赋值</span> <span class="token keyword">read</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>nml<span class="token operator">=</span><span class="token string">'nu_name'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">!读取文件内容到NAMELIST</span> <span class="token keyword">write</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span>nml<span class="token operator">=</span><span class="token string">'nu_name'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">!将NAMELIST内容写入到文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ol><h1 id="流程控制与逻辑判断"><a href="#流程控制与逻辑判断" class="headerlink" title="流程控制与逻辑判断"></a>流程控制与逻辑判断</h1><ol><li><p>语法结构   </p><ul><li><p>IF语句   </p><pre class="line-numbers language-fortran"><code class="language-fortran">  <span class="token keyword">if</span> <span class="token punctuation">(</span>Condition <span class="token number">1</span><span class="token punctuation">)</span> 程序语句   <span class="token comment" spellcheck="true">!程序语句只能有一个命令</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Condition <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">then</span>      ...                <span class="token comment" spellcheck="true">!Condition 1成立时，运行此程序段</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Condition <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">then</span>      ...                <span class="token comment" spellcheck="true">!Condition 2成立时，运行此程序段</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Condition <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">then</span>      ...                <span class="token comment" spellcheck="true">!Condition 3成立时，运行此程序段</span>  <span class="token keyword">else</span>      ...                <span class="token comment" spellcheck="true">!Condition 1、2、3都不成立时，运行此模块</span>  <span class="token keyword">end if</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Select语句   </p><pre class="line-numbers language-fortran"><code class="language-fortran">  <span class="token keyword">select</span> <span class="token keyword">case</span> <span class="token punctuation">(</span>variable<span class="token punctuation">)</span>  <span class="token keyword">case</span> <span class="token punctuation">(</span>Num1<span class="token punctuation">)</span>      ...                <span class="token comment" spellcheck="true">!variable等于Num1时，执行此程序段</span>  <span class="token keyword">case</span> <span class="token punctuation">(</span>Num2<span class="token punctuation">:</span>Num3<span class="token punctuation">)</span>      ...                <span class="token comment" spellcheck="true">!Num2&lt;=variable&lt;=Num3时，执行此程序段</span>  <span class="token keyword">case</span> <span class="token punctuation">(</span>Num4<span class="token punctuation">:</span><span class="token punctuation">)</span>      ...                <span class="token comment" spellcheck="true">!variable>=Num4时，执行此程序段</span>  <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token punctuation">:</span>Num5<span class="token punctuation">)</span>      ...                <span class="token comment" spellcheck="true">!variable&lt;=Num5时，执行此程序段</span>  <span class="token keyword">case</span> <span class="token punctuation">(</span>Num6<span class="token punctuation">,</span>Num7<span class="token punctuation">,</span>Num8<span class="token punctuation">)</span>      ...                <span class="token comment" spellcheck="true">!variable=Num6或Num7或Num8时，执行此程序段</span>  <span class="token keyword">case</span> <span class="token keyword">default</span>      ...                <span class="token comment" spellcheck="true">!variable不等于任何Num时，执行此程序段</span>  <span class="token keyword">end select</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>case中只能使用整型，字符型和逻辑变量类型，不能使用浮点数和复数   </li><li>case中只能使用常量，不能使用变量   </li></ul></blockquote></li><li><p>Goto语句   </p><pre class="line-numbers language-fortran"><code class="language-fortran">  <span class="token keyword">goto</span> <span class="token number">300</span>    <span class="token comment" spellcheck="true">!跳到标号为300的行执行程序</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span>   <span class="token comment" spellcheck="true">!判断c的值，c&lt;0,跳到第10行，c=0,跳到第20行，c>0,跳到第30行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Pause, Continue, Stop语句   </p><blockquote><ul><li>程序执行到Pause暂停，知道用户输入enter继续   </li><li>continue没有实际意义，就是继续向下执行程序的意思   </li><li>stop意为结束程序   </li></ul></blockquote></li></ul></li><li><p>逻辑判断   </p><ul><li><p>逻辑运算   </p><table><thead><tr><th align="center">逻辑运算</th><th align="center">Fortran 90</th><th align="center">Fortran 77</th></tr></thead><tbody><tr><td align="center">相等</td><td align="center">==</td><td align="center">.EQ.</td></tr><tr><td align="center">不相等</td><td align="center">/=</td><td align="center">.NE.</td></tr><tr><td align="center">大于</td><td align="center">&gt;</td><td align="center">.GT.</td></tr><tr><td align="center">大于等于</td><td align="center">&gt;=</td><td align="center">.GE.</td></tr><tr><td align="center">小于</td><td align="center">&lt;</td><td align="center">.LT.</td></tr><tr><td align="center">小于等于</td><td align="center">&lt;=</td><td align="center">.LE.</td></tr></tbody></table></li><li><p>逻辑关系   </p><table><thead><tr><th align="center">写法</th><th align="left">逻辑关系</th></tr></thead><tbody><tr><td align="center">.AND.</td><td align="left">交集：两边都成立才成立</td></tr><tr><td align="center">.OR.</td><td align="left">并集：两边只要有一个成立就成立</td></tr><tr><td align="center">.NOT.</td><td align="left">逻辑反向：后面不成立才成立</td></tr><tr><td align="center">.EQV.</td><td align="left">逻辑相同：两边相同就成立</td></tr><tr><td align="center">.NEQV.</td><td align="left">逻辑相反：两边不相同就成立</td></tr></tbody></table></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Fortran </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fortran </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git使用说明</title>
      <link href="/2019/09/24/linux-git-shi-yong-shuo-ming/"/>
      <url>/2019/09/24/linux-git-shi-yong-shuo-ming/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h1><ol><li><p>配置工具</p><ul><li>使用<code>git config</code>进行配置</li><li>使用<code>--system</code>选项配置<code>/etc/gitconfig</code>文件，适用于所有用户</li><li>使用<code>--global</code>选项配置<code>~/.gitconfig</code>文件，适用于当前用户</li><li>不使用任何选项，则配置当前项目目录中的<code>.git/config</code>文件，适用于当前项目</li></ul></li><li><p>配置个人用户信息</p><pre><code> git config --global user.name &quot;用户名&quot;     #设置用户名 git config --global user.email &quot;邮箱&quot;      #设置邮箱</code></pre></li><li><p>配置默认文本编辑器</p><pre><code> git config --global core.editor vim</code></pre></li><li><p>配置差异分析工具</p><pre><code> git config --global merge.tool vimdiff</code></pre><blockquote><p>可选择的有kdiff3, tkdiff, meld, xxdiff, emerge, vimdiff, gvimdiff, ecmerge, opendiff等</p></blockquote></li><li><p>查看配置信息</p><pre><code>git config --list</code></pre><blockquote><p>重复的变量名说明来自不同的配置文件，以最后一个为准</p></blockquote></li></ol><h1 id="创建Git仓库"><a href="#创建Git仓库" class="headerlink" title="创建Git仓库"></a>创建Git仓库</h1><ol><li>创建本地仓库<pre><code> git init #以当前目录作为Git仓库 git init newrepo #以newrepo目录作为Git仓库</code></pre></li><li>克隆远程仓库到本地<pre><code> git clone &lt;repo&gt; &lt;local directory&gt; # 克隆repo到本地目录，省略本地目录则克隆到当前目录</code></pre><blockquote><p>远程repo的三种写法(SSH协议速度最快)</p><pre><code> git clone git@github.com:schacon/grit.git    #SSH协议 git clone git://github.com/schacon/grit.git   #GIT协议 git clone https://github.com/schacon/grit.git   #HTTPS协议</code></pre></blockquote></li></ol><h1 id="Git基本操作"><a href="#Git基本操作" class="headerlink" title="Git基本操作"></a>Git基本操作</h1><ol><li>添加文件到缓存<pre><code> git add &lt;文件1&gt; &lt;文件2&gt; &lt;文件3&gt; git add .   #添加所有新增和修改到缓存，忽略删除文件操作 git add -u   #添加所有删除和修改到缓存，忽略新增文件操作 git add -A   #添加所有新增、修改和删除到缓存，忽略删除文件操作</code></pre></li><li>提交缓存区内容到仓库<pre><code> git commit -m &#39;提交信息&#39; git commit -am &#39;提交信息&#39;   #跳过添加缓存，直接提交文件</code></pre></li><li>查看状态<pre><code> git status git status -s   #以简短结果输出</code></pre></li><li>查看缓存改动<pre><code> git diff   #查看尚未缓存的改动 git diff --cached   #查看已缓存的改动 git diff HEAD   #查看尚未缓存与已缓存的所有改动 git diff --stat   #仅显示摘要</code></pre></li><li>取消已缓存内容<pre><code> git reset HEAD &lt;file name&gt;</code></pre></li><li>移除文件<pre><code> git rm &lt;file name&gt;   #移除未缓存本地文件 git rm -f &lt;file name&gt;   #移除已缓存的本地文件 git rm --cached &lt;file name&gt;   #仅从缓存区移除文件（保留本地文件） git rm -r &lt;directory name&gt;   #递归删除目录</code></pre></li><li>移动/重命名文件<pre><code> git mv &lt;file name&gt; &lt;new neme/directory&gt;</code></pre></li></ol><h1 id="Git分支管理"><a href="#Git分支管理" class="headerlink" title="Git分支管理"></a>Git分支管理</h1><pre><code>```git branch &lt;branch name&gt;   #创建本地分支git branch   #查看本地分支git checkout &lt;branch name&gt;   #切换本地分支git checkout -b &lt;branch name&gt;   #创建并立即切换到新分支git checkout -d &lt;branch name&gt;   #删除分支git merge &lt;branch name&gt;   #将选定分支合并到当前分支```</code></pre><h1 id="查看Git提交历史"><a href="#查看Git提交历史" class="headerlink" title="查看Git提交历史"></a>查看Git提交历史</h1><pre><code>```git loggit log --oneline   #查看简洁版历史记录git log --graph   #以拓扑图形式查看历史记录git log --reverse   #逆向查看历史记录git log --author   #查看指定用户的提交记录git log --since(or --before, --until, --after)={3.weeks.ago    (or 2019-04-31)}   #指定日期查看git log --no-merges   #隐藏合并提交```</code></pre><blockquote><p>多个命令可以一起使用，例如：<br>    <code>git log --reverse --oneline</code></p></blockquote><h1 id="Git标签"><a href="#Git标签" class="headerlink" title="Git标签"></a>Git标签</h1><pre><code>```git tag -a &lt;tag name&gt;   #创建标签git tag -a &lt;tag name&gt; -m &lt;tag information&gt;   #创建带注解的标签git tag -a &lt;tag name&gt; &lt;commit number&gt;   #追加标签git tag   #列出所有标签git tag -s &lt;tag name&gt; -m &lt;tag information&gt;   #PGP签名标签git tag -d &lt;tag name&gt;   #删除标签git show &lt;tag name&gt;   #查看某标签对应版本的修改内容```</code></pre><h1 id="Git远程仓库（以Github为例）"><a href="#Git远程仓库（以Github为例）" class="headerlink" title="Git远程仓库（以Github为例）"></a>Git远程仓库（以Github为例）</h1><ol><li><p>链接github   </p><pre><code> ssh-keygen -t rsa -C &quot;github注册邮箱&quot;   #生成SSH Key</code></pre><blockquote><p>进入<code>~/.ssh</code>文件夹，打开<code>id_rsa.pub</code>文件，复制里面的SSH public key到github网站</p><pre><code> ssh -T git@github.com   #验证是否链接成功</code></pre></blockquote></li><li><p>查看当前远程库</p><pre><code> git remote git remote -v   #显示每个别名的实际链接地址</code></pre></li><li><p>提取远程仓库</p><pre><code> git fetch &lt;远程库&gt; &lt;branch name&gt; #从指定远程库中拉取指定分支，拉取下来的分支名为&lt;远程库/分支名&gt; git merge &lt;远程库/分支名&gt;   #将拉取下来的分支合并到当前分支 git checkout -d &lt;远程库/分支名&gt;   #删除拉取下来的分支</code></pre><blockquote><p>上述步骤可以简化成下面一步：</p><pre><code> git pull &lt;远程库&gt; &lt;branch name&gt;   #将远程库中的指定分支拉取并与本地当前分支合并</code></pre></blockquote><p> git pull &lt;远程库&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;   #将远程库中的指定分支拉取并与指定本地分支合并<br> ```</p></li><li><p>推送本地分支到远程仓库</p><pre><code> git push &lt;远程库&gt; &lt;branch name&gt;   #将指定的本地分支推送到指定远程库中的同名分支 git push &lt;远程库&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;   #将指定的本地分支推送到指定远程库中的指定分支</code></pre></li><li><p>添加远程库   </p><pre><code> git remote add &lt;远程库&gt; &lt;url&gt;</code></pre></li><li><p>删除远程仓库   </p><pre><code> git remote rm &lt;远程库&gt;</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 使用说明</title>
      <link href="/2019/09/15/linux-markdown-shi-yong-shuo-ming/"/>
      <url>/2019/09/15/linux-markdown-shi-yong-shuo-ming/</url>
      
        <content type="html"><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><pre><code># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><h1 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h1><ul><li><p>换行   </p><blockquote><p>两个以上空格加回车   </p></blockquote></li><li><p>字体</p><pre><code>  普通文本  *斜体文本*  **粗体文本**  ***粗斜体文本***</code></pre></li><li><p>分隔线</p><blockquote><p>三个以上<code>*</code>或<code>-</code>，中间可以有空格</p><pre><code>  ***或* * *  ---或- - -</code></pre></blockquote></li><li><p>删除线   </p><blockquote><p>文字两端加双波浪线<code>~~</code>即可</p><pre><code>  ～～删除线～～</code></pre></blockquote></li><li><p>下划线   </p><blockquote><p>通过<code>&lt;u&gt;</code>标签来实现</p><pre><code>  &lt;u&gt;下划线文本&lt;/u&gt;</code></pre></blockquote></li><li><p>脚注   </p><blockquote><p>需要创建脚注的文字 [^脚注]。<br>[^脚注]: 脚注内容</p></blockquote></li></ul><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><ul><li><p>无序列表   </p><blockquote><p>无序列表使用星号<code>*</code>、加号<code>+</code>或是减号<code>-</code>作为列表标记，例如：</p><pre><code>  * 第一项  * 第二项  * 第三项</code></pre></blockquote></li><li><p>有序列表   </p><blockquote><p>有序列表使用数字并加上 <code>.</code> 号来表示， 例如：</p><pre><code>  1. 第一项  2. 第二项  3. 第三项</code></pre></blockquote></li><li><p>列表嵌套   </p><blockquote><p>列表嵌套只需在子列表中的选项添加四个空格即可，例如：</p><pre><code>  1. 第一项：      - 第一项嵌套的第一个元素      - 第一项嵌套的第二个元素  2. 第二项：      - 第二项嵌套的第一个元素      - 第二项嵌套的第一个元素</code></pre></blockquote></li></ul><h1 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h1><ul><li><p>区块使用   </p><blockquote><p>区块引用是在段落开头使用<code>&gt;</code>符号 ，然后后面紧跟一个空格符号，例如：</p><pre><code>区块文字1区块文字2区块文字3</code></pre></blockquote></li><li><p>区块嵌套   </p><blockquote><p>一个<code>&gt;</code>符号是最外层，两个<code>&gt;</code>符号是第一层嵌套，以此类推退，例如：</p><pre><code>最外层&gt; 第一层嵌套&gt; &gt; 第二层嵌套</code></pre></blockquote></li><li><p>区块使用列表   </p><blockquote><p>直接使用，例如：</p><pre><code>区块中使用列表1. 第一项2. 第二项+ 第一项+ 第二项+ 第三项</code></pre></blockquote></li><li><p>列表中使用区块   </p><blockquote><p>在<code>&gt;</code>前添加四个空格的缩进，例如：</p><pre><code>  * 第一项区块文字1区块文字2  * 第二项</code></pre></blockquote></li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><ul><li><p>行间代码   </p><blockquote><p>直接用反引号 ( ` ) 包起来，例如；</p><pre><code>  `function`  #函数</code></pre></blockquote></li><li><p>区块代码   </p><blockquote><p>用 ( ``` ) 包裹一段代码，并指定一种语言（也可以不指定），例如:</p></blockquote><blockquote><p>```python<br>str = input(“请输入：”)<br>print (“你输入的内容是: “, str)<br>```</p></blockquote></li></ul><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><pre><code>[链接名称](链接地址)或者&lt;链接地址&gt;</code></pre><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><ul><li>开头一个感叹号 <code>!</code>   </li><li>接着一个方括号，里面放上图片的替代文字   </li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</li><li>例如：<pre><code>  ![alt 属性文本](图片地址 &quot;可选标题&quot;)</code></pre></li></ul><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><ul><li>使用 <code>|</code> 来分隔不同的单元格，使用 <code>-</code> 来分隔表头和其他行，例如：<pre><code>  |  表头   | 表头  |  |  ----  | ----  |  | 单元格  | 单元格 |  | 单元格  | 单元格 |</code></pre></li><li>表格对齐   <ul><li><code>-:</code> 设置内容和标题栏居右对齐。   </li><li><code>:-</code> 设置内容和标题栏居左对齐。   </li><li><code>:-:</code> 设置内容和标题栏居中对齐。   </li><li>例如：<pre><code>| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 |</code></pre></li></ul></li><li>注意：表格前必须以空行与前面文字隔开，否则会被当成普通文本处理 </li></ul><h1 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h1><p>使用反斜杠<code>\</code>转义特殊字符, 例如：<code>\*</code>。</p><h1 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h1><p>使用两个美元符 <code>$$</code> 包裹 TeX 或 LaTeX 格式的数学公式，例如：</p><pre><code>$$\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix} \mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \\\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \\\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \\\end{vmatrix}$$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}$$</code></pre><p>注意：提交后需加载 Mathjax 对数学公式进行渲染。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Markdown </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Samba使用说明</title>
      <link href="/2019/09/15/linux-samba-shi-yong-shuo-ming/"/>
      <url>/2019/09/15/linux-samba-shi-yong-shuo-ming/</url>
      
        <content type="html"><![CDATA[<h1 id="安装Samba"><a href="#安装Samba" class="headerlink" title="安装Samba"></a>安装Samba</h1><pre><code>sudo aptitude install sambasudo aptitude install samba-common</code></pre><h1 id="配置samba"><a href="#配置samba" class="headerlink" title="配置samba"></a>配置samba</h1><pre><code>sudo vim /etc/samba/smb.conf  # 配置samba</code></pre><p>在文件末尾添加如下</p><pre><code>[share]   path = /home/share    # 要共享的文件夹，任意文件夹均可，提前配置好权限   available = yes   browseable = yes   #public = yes   writable = yes</code></pre><p>保存退出</p><h1 id="创建samba账户"><a href="#创建samba账户" class="headerlink" title="创建samba账户"></a>创建samba账户</h1><pre><code>sudo touch /etc/samba/smbpasswdsudo smbpasswd -a 用户名   #注意：用户名必须是当前登录linux的用户名</code></pre><h1 id="重启samba"><a href="#重启samba" class="headerlink" title="重启samba"></a>重启samba</h1><pre><code>sudo /etc/init.d/smbd restart</code></pre><h1 id="Windows端设置"><a href="#Windows端设置" class="headerlink" title="Windows端设置"></a>Windows端设置</h1><ul><li>win+R调出运行   </li><li>输入ip地址，例如：<code>\\192.168.1.128</code>   </li><li>输入刚创建好的samba账户密码即可</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Samba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows常用命令（持续更新）</title>
      <link href="/2019/09/14/windows-chang-yong-ming-ling/"/>
      <url>/2019/09/14/windows-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="合并文件"><a href="#合并文件" class="headerlink" title="合并文件"></a>合并文件</h1><ul><li><p>shift+rightclick, choose ‘open command window here’    </p></li><li><p>Copying the command below    </p><p>  <code>for %f in (*.txt) do type &quot;%f&quot; &gt;&gt; output.txt</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>禁止win10自动安装软件</title>
      <link href="/2019/09/14/windows-jin-zhi-win10-zi-dong-an-zhuang-ruan-jian/"/>
      <url>/2019/09/14/windows-jin-zhi-win10-zi-dong-an-zhuang-ruan-jian/</url>
      
        <content type="html"><![CDATA[<ol><li><p><code>win+R</code>, 输入<code>regedit</code>打开注册表编辑器   </p></li><li><p>展开以下位置<code>HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows\</code>   </p></li><li><p>右键点击<code>Windows</code>，新建<code>key</code>，命名为<code>CloudContent</code>   </p></li><li><p>选择<code>CloudContent</code>，在页面右边空白组点击鼠标右键，新建<code>DWORD(32位)值（D）</code>，命名为<code>DisableWindowsConsumerFeatures</code>   </p></li><li><p>双击打开<code>DisableWindowsConsumerFeatures</code>，在<code>data value</code>中输入数值<code>1</code>，确定保存。   </p></li><li><p>完成。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3科学计算环境搭建</title>
      <link href="/2019/09/14/python-python3-ke-xue-ji-suan-huan-jing-da-jian/"/>
      <url>/2019/09/14/python-python3-ke-xue-ji-suan-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Python3科学计算环境搭建"><a href="#Python3科学计算环境搭建" class="headerlink" title="Python3科学计算环境搭建"></a>Python3科学计算环境搭建</h1><pre><code>sudo apt-get install python3-pip    #安装pip   sudo pip3 install --upgrade pip    #更新pip</code></pre><pre><code>sudo pip3 install numpy    #数据处理   sudo pip3 install scipy    #科学计算   sudo pip3 install pandas    #数据分析   sudo pip3 install matplotlib    #画图   sudo pip3 install seaborn    #美化matplotlib图表   sudo pip3 install ipython    #python shell   sudo pip3 install jupyter    #python note</code></pre><pre><code>sudo apt-get install Spyder    #科学计算IDE`</code></pre><h1 id="pip使用说明"><a href="#pip使用说明" class="headerlink" title="pip使用说明"></a>pip使用说明</h1><pre><code>pip3 help    #显示帮助`   pip3 search &lt;包名&gt;    #查找需要安装的包`</code></pre><pre><code>sudo pip3 install &lt;包名&gt;    #安装包   sudo pip3 install &lt;包名&gt;==1.0.4   sudo pip3 install &lt;包名&gt; -i http://pypi.mirrors.ustc.edu.cn/simple/ </code></pre><pre><code>pip3 list    #列出已经安装的包   pip3 list  -o   #列出过期的包</code></pre><pre><code>sudo pip3 install &lt;包名&gt; -U    #升级包`pip3 show &lt;包名&gt;    #显示包信息`pip3 check &lt;包名&gt;    #检查包依赖`sudo pip3 uninstall &lt;包名&gt;    #卸载包`</code></pre><h2 id="在配置文件中指定pip安装源（没有配置文件可以手动添加一个）"><a href="#在配置文件中指定pip安装源（没有配置文件可以手动添加一个）" class="headerlink" title="在配置文件中指定pip安装源（没有配置文件可以手动添加一个）"></a>在配置文件中指定pip安装源（没有配置文件可以手动添加一个）</h2><p>/etc/pip.conf </p><pre><code>[global] timeout = 6000 index-url = http://pypi.douban.com/simple</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日常设置（持续更新）</title>
      <link href="/2019/09/14/other-ri-chang-she-zhi/"/>
      <url>/2019/09/14/other-ri-chang-she-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="护眼颜色设置"><a href="#护眼颜色设置" class="headerlink" title="护眼颜色设置"></a>护眼颜色设置</h1><ul><li><p>Page</p><blockquote><p>RGB: 40-44-52<br>颜色码: 282C34</p></blockquote></li><li><p>Word</p><blockquote><p>RGB: 171-178-191<br>颜色码: ABB2BF</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB并行计算设置</title>
      <link href="/2019/09/13/matlab-bing-xing-ji-suan-she-zhi/"/>
      <url>/2019/09/13/matlab-bing-xing-ji-suan-she-zhi/</url>
      
        <content type="html"><![CDATA[<ul><li><p>Go to ‘home-environment-parallel-parallel preferences’ to set the default cluster    </p></li><li><p>Go to ‘home-environment-parallel-manage cluster profiles’, choose the default cluster and click ‘edit’ to change the number of workers    </p><blockquote><p>this is the maximum workers that you can use    </p></blockquote></li><li><p>In your program file, at the begining (before virable statement), write the command below to assign the number of workers (num1) that you want to use (less than the number in cluster file).    </p><p>  <code>parpool (num1)</code>    </p></li><li><p>Use the command below to assign which part of the programe you want to do parallel computing. In this command, you divide your program into ‘num2’ parts and each part will be assigned one worker to compute. If num2 is bigger than num1, for example 5 times, it’s ok because the computer will do the computing 5 times.</p><pre><code>  parfor i=1:num2  (part of the programe that you want to do parallel computing)  End</code></pre></li><li><p>If in ‘home-environment-parallel-parallel preferences’, ‘automatically create parallel pool’ is ticked, matlab will automatically using parallel computing without step 3) but step 3) will overwrite this option.    </p></li><li><p>Every time you change the numbers of workers in step 3), remember to restart to parallel pool (at the left buttom of the window).</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> MATLAB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB使用技巧</title>
      <link href="/2019/09/13/matlab-shi-yong-ji-qiao/"/>
      <url>/2019/09/13/matlab-shi-yong-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1 id="同时运行多个程序代码文件"><a href="#同时运行多个程序代码文件" class="headerlink" title="同时运行多个程序代码文件"></a>同时运行多个程序代码文件</h1><blockquote><ul><li><p>Put all the program files in the same folder    </p></li><li><p>In the command window, write the program name in the order that you want them to run (each name in a separate line).    </p></li><li><p>Click run and enjoy! </p></li></ul></blockquote><h1 id="计算程序运行时间"><a href="#计算程序运行时间" class="headerlink" title="计算程序运行时间"></a>计算程序运行时间</h1><pre><code>tic(part of the program you want to measure)toc</code></pre>]]></content>
      
      
      <categories>
          
          <category> MATLAB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MATLAB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sublime text 3 使用说明</title>
      <link href="/2019/09/13/linux-sublime-text-3-shi-yong-shuo-ming/"/>
      <url>/2019/09/13/linux-sublime-text-3-shi-yong-shuo-ming/</url>
      
        <content type="html"><![CDATA[<h1 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h1><p>打开配置文件： Perferences-&gt;setting-&gt;user, 并加入</p><pre><code>&quot;hot_exit&quot;: false,     # 不记住上次打开的文件&quot;save_on_focus_lost&quot;: true,    # 失去焦点自动保存</code></pre><p>改过之后的配置文件如下: </p><pre><code>{    &quot;color_scheme&quot;: &quot;Packages/Color Scheme - Default/Mariana.sublime-color-scheme&quot;,    &quot;hot_exit&quot;: false,    &quot;ignored_packages&quot;:    [        &quot;Vintage&quot;    ],    &quot;save_on_focus_lost&quot;: true,    &quot;theme&quot;: &quot;Default.sublime-theme&quot;}</code></pre><h1 id="安装插件管理器"><a href="#安装插件管理器" class="headerlink" title="安装插件管理器"></a>安装插件管理器</h1><ul><li><p>打开console，粘贴以下代码到命令行并回车：</p><p>  <code>import urllib.request,os; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &#39;wb&#39;).write(urllib.request.urlopen( &#39;http://sublime.wbond.net/&#39; + pf.replace(&#39; &#39;,&#39;%20&#39;)).read())</code></p></li><li><p>重启程序；</p></li><li><p>如果在Perferences-&gt;中看到package control这一项，则安装成功。</p></li></ul><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><ul><li>按下Ctrl+Shift+P调出命令面板，输入install，选中 Install Package 选项并回车</li><li>输入想要安装的插件，选中安装</li><li>移除插件输入remove</li><li>更新插件输入upgrade。</li></ul><h1 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h1><ul><li>ConvertToUTF8 （解决中文乱码）</li><li>CTags （函数跳转）</li><li>Fortran （Fortran语法高亮）</li><li>WordCount （统计字数）</li><li>Markdown Preview （预览Markdown）</li><li>MarkdownEditing （Markdown语法高亮）</li></ul><h1 id="配置MarkdownEditing插件"><a href="#配置MarkdownEditing插件" class="headerlink" title="配置MarkdownEditing插件"></a>配置MarkdownEditing插件</h1><ul><li><p>ctrl+shift+p打开命令输入Preference: MarkdownEditing Setting， 出现下面两个选项，分别打开</p><blockquote><p>Preference: MarkdownEditing Setting: Default<br>Preference: MarkdownEditing Setting: User</p></blockquote></li><li><p>将Preference: MarkdownEditing Setting: Default对应文件全部内容复制到Preference: MarkdownEditing Setting: User中</p></li><li><p>在Preference: MarkdownEditing Setting: User中修改任何想要修改的配置，主要如下：</p><pre><code>&quot;color_scheme&quot;: &quot;Packages/Color Scheme - Default/Mariana.sublime-color-scheme&quot;,  // 修改主题风格为系统自带  // &quot;color_scheme&quot;: &quot;Packages/MarkdownEditing/MarkdownEditor.tmTheme&quot;,  // &quot;color_scheme&quot;: &quot;Packages/MarkdownEditing/MarkdownEditor-Dark.tmTheme&quot;,  // &quot;color_scheme&quot;: &quot;Packages/MarkdownEditing/MarkdownEditor-Yellow.tmTheme&quot;,&quot;highlight_line&quot;: true, // 高亮正在编辑的行&quot;line_numbers&quot;: true,   // 显示行号&quot;tab_size&quot;: 4,          // tab宽度&quot;translate_tabs_to_spaces&quot;: true,   // tab转换为空格&quot;trim_trailing_white_space_on_save&quot;: false,  // 取消保存时删除行尾空格&quot;word_wrap&quot;: true,      // 自动换行&quot;wrap_width&quot;: &quot;auto&quot;,    // 换行的宽度,默认80会造成左侧大量留白&quot;mde.keep_centered&quot;: false,  // 取消保持你正在编辑的行始终处于屏幕的中间</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Windows </tag>
            
            <tag> Sublime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令（持续更新）</title>
      <link href="/2019/09/13/linux-chang-yong-ming-ling/"/>
      <url>/2019/09/13/linux-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="压缩-解压"><a href="#压缩-解压" class="headerlink" title="压缩/解压"></a>压缩/解压</h1><ul><li>Look up<pre><code>tar   -ztvf   /.../*.tar.gz   tar   -jtvf   /.../*.tar.bz2</code></pre></li><li>Compress<pre><code>tar   -jcvf   /.../*.tar.bz2   /home/downloadstar   -zcvf   /.../*.tar.gz   /home/downloads</code></pre></li><li>Decompress<pre><code>tar   -jxvf   /.../*.tar.bz2   (/home/downloads)tar   -zxvf   /.../*.tar.gz   (/home/downloads)</code></pre></li></ul><h1 id="备份-还原"><a href="#备份-还原" class="headerlink" title="备份/还原"></a>备份/还原</h1><ul><li>Backup<pre><code>dd   if=/.../*    of=/.../*.bakdd   if=/dev/sda3    of=/.../sda3.bak</code></pre></li><li>Restore<pre><code>umount /dev/sda3dd   if=/.../sda3.bak    of=/dev/sda3</code></pre></li></ul><h1 id="挂载-卸载"><a href="#挂载-卸载" class="headerlink" title="挂载/卸载"></a>挂载/卸载</h1><ul><li>Mount<pre><code>mount   -o   codepage=936,iocharset=cp936   -t   ntfs   /dev/sda3   /home/temountmount   -o   loop   -t   iso9660   /.../*.iso   /home/temount</code></pre></li><li>Unmount<br><code>umount   /home/temount/</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim使用说明</title>
      <link href="/2019/09/13/linux-vim-shi-yong-shuo-ming/"/>
      <url>/2019/09/13/linux-vim-shi-yong-shuo-ming/</url>
      
        <content type="html"><![CDATA[<h1 id="建立文件"><a href="#建立文件" class="headerlink" title="建立文件"></a>建立文件</h1><pre><code>vim ~/.vimrc   &quot;vim配置文件vim ~/.vimrc.bundles    &quot;插件配置文件mkdir ~/.vim    &quot;插件安装目录</code></pre><h1 id="插件管理工具vundle安装、配置与使用"><a href="#插件管理工具vundle安装、配置与使用" class="headerlink" title="插件管理工具vundle安装、配置与使用"></a>插件管理工具vundle安装、配置与使用</h1><p><code>git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle     &quot;安装vundle</code></p><p>使用vundle：运行vim，键入以下命令   </p><pre><code>:PluginInstall     &quot;安装插件 （需先在配置文件中添加插件）:BundleClean     &quot;卸载插件 （需先在配置文件中删除插件）:BundleUpdate     &quot;更新插件:BundleList     &quot;查看已安装插件:BundleSearch     &quot;搜索插件</code></pre><h1 id="插件配置文件-vimrc-bundles-设置"><a href="#插件配置文件-vimrc-bundles-设置" class="headerlink" title="插件配置文件(.vimrc.bundles)设置"></a>插件配置文件(.vimrc.bundles)设置</h1><pre><code>if &amp;compatible  set nocompatibleendfiletype offset rtp+=~/.vim/bundle/vundle/call vundle#rc()&quot; Let Vundle manage VundleBundle &#39;gmarik/vundle&#39;&quot; Define bundles via Github reposBundle &quot;tomasr/molokai&quot;Bundle &quot;JamshedVesuna/vim-markdown-preview&quot;（继续添加你想要的插件）if filereadable(expand(&quot;~/.vimrc.bundles.local&quot;))  source ~/.vimrc.bundles.localendiffiletype on</code></pre><h1 id="Vim配置文件-vimrc-设置"><a href="#Vim配置文件-vimrc-设置" class="headerlink" title="Vim配置文件(.vimrc)设置"></a>Vim配置文件(.vimrc)设置</h1><pre><code>set nocompatible  &quot; 去掉有关vi一致性模式，避免以前版本的一些bug和局限，必须放开头&quot; 启用插件配置if filereadable(expand(&quot;~/.vimrc.bundles&quot;))  source ~/.vimrc.bundlesendif&quot; 高亮当前行列au WinLeave * set nocursorline nocursorcolumnau WinEnter * set cursorline cursorcolumnset cursorline cursorcolumn&quot; 高亮显示第73列set textwidth=72set colorcolumn=+1set number  &quot; 显示行号set numberwidth=5  &quot; 行号显示宽度set nobackup  &quot;禁止生成临时文件set noswapfile  &quot;禁止生成临时文件set nowritebackupset backspace=2   &quot; 像其他编辑器一样退格set showcmd &quot; 输入的命令显示出来，看的清楚些set ignorecase  &quot;  搜索忽略大小写set nohls  &quot; 默认情况下，寻找匹配是高亮度显示的，该设置关闭高亮显示set incsearch  &quot; 设置查询，如此查询时非常方便，如要查找book单词，当输入到/b时，会自动找到第一个b开头的单词set showmatch  &quot; 设置匹配模式，如当输入一个左括号时会匹配相应的右括号set autowrite &quot; 自动保存set autoread  &quot; 设置当文件被改动时自动载入set confirm  &quot; 在处理未保存或只读文件的时候，弹出确认set clipboard+=unnamed  &quot; 共享剪贴板set laststatus=2  &quot; 总是显示状态栏set ruler  &quot; 在编辑过程中，在右下角显示光标位置的状态行set vb t_vb=  &quot; 当vim进行编辑时，如果命令错误，会发出一个响声，该设置去掉响声set mouse=a  &quot; 设置鼠标光标可用filetype plugin indent on  &quot; 检测文件类型，启动插件，启动缩进set history=1000  &quot; 记录历史的行数syntax on  &quot; 语法高亮显示set tabstop=4  &quot; 设置tab建为4个空格set shiftwidth=4  &quot; 设置行之间交错时使用4个空格set softtabstop=4  &quot; 统一缩进为4set autoindent  &quot; 自动对齐，即将当前行的对齐格式应用到下一行set smartindent  &quot; 根据上面的对齐格式，智能的选择对齐格式set fileencodings=utf-8,gb18030,gbk,big5,gb2312,cp936   &quot; 中文支持&quot; set guifont=Courier_New:h10:cANSI    &quot; 设置字体&quot; set background=dark  &quot; 设置背景颜色&quot; set guioptions-=T  &quot; 去除vim的GUI版本中的toolbar&quot; set guioptions-=T &quot; 隐藏工具栏&quot; set guioptions-=m &quot; 隐藏菜单栏&quot; 配色主题colorscheme molokaihighlight NonText guibg=#060606highlight Folded guibg=#0A0A0A guifg=#9090D0</code></pre><h1 id="Vim插件推荐"><a href="#Vim插件推荐" class="headerlink" title="Vim插件推荐"></a>Vim插件推荐</h1><ul><li><p>安装Molokai主题   </p><p>  <code>在.vimrc.bundles中加入Bundle &quot;tomasr/molokai&quot;并安装</code></p></li><li><p>安装Markdown预览   </p><blockquote><p><code>sudo pip install grip   安装grip</code>   </p><p>在.vimrc.bundles中加入Bundle “JamshedVesuna/vim-markdown-preview”并安装   </p><p>在.vimrc中加入 let vim_markdown_preview_github=1   </p><p>vim中按Ctrl+p即可弹出浏览器预览文档</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用说明</title>
      <link href="/2019/09/13/linux-hexo-shi-yong-shuo-ming/"/>
      <url>/2019/09/13/linux-hexo-shi-yong-shuo-ming/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo使用说明"><a href="#Hexo使用说明" class="headerlink" title="Hexo使用说明"></a>Hexo使用说明</h1><ul><li>首先附上hexo官方网址，里面有详细教程及主题。<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a></li></ul><h2 id="创建Github-Pages-仓库"><a href="#创建Github-Pages-仓库" class="headerlink" title="创建Github Pages 仓库"></a>创建Github Pages 仓库</h2><blockquote><p>GitHub 主页右上角加号 -&gt; New repository：<br>Repository name 中输入 用户名.github.io （用户名必须与github用户名一致）</p></blockquote><h2 id="安装hexo（参考官方文档）"><a href="#安装hexo（参考官方文档）" class="headerlink" title="安装hexo（参考官方文档）"></a>安装hexo（参考官方文档）</h2><pre><code>wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash   #安装nvm   npm   install   -g   hexo-cli      #安装博客程序</code></pre><h2 id="初始化并安装所需组件："><a href="#初始化并安装所需组件：" class="headerlink" title="初始化并安装所需组件："></a>初始化并安装所需组件：</h2><pre><code>mkdir   ~/Hexo-Blog      #设置博客所在目录（后面的操作都在这个目录下完成）hexo init      # 初始化npm install    # 安装组件</code></pre><h2 id="启动本地服务器进行预览："><a href="#启动本地服务器进行预览：" class="headerlink" title="启动本地服务器进行预览："></a>启动本地服务器进行预览：</h2><pre><code>hexo g   # 生成页面hexo s   # 启动预览</code></pre><p>访问<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>，出现 Hexo 默认页面，本地博客安装成功！<br>Tips：如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 hexo server -p 5000 更改端口号后重试。</p><h2 id="部署-Hexo-到-GitHub-Pages"><a href="#部署-Hexo-到-GitHub-Pages" class="headerlink" title="部署 Hexo 到 GitHub Pages"></a>部署 Hexo 到 GitHub Pages</h2><p><code>npm install hexo-deployer-git --save   #安装 hexo-deployer-git</code></p><p>修改 _config.yml 文件末尾的 Deployment 部分，修改成如下： </p><pre><code>deploy:  type: git  repository: git@github.com:用户名/用户名.github.io.git  branch: master</code></pre><p><code>hexo d   # 将网站上传部署到 GitHub Pages</code></p><h1 id="访问博客"><a href="#访问博客" class="headerlink" title="访问博客"></a>访问博客</h1><p>博客域名 <a href="https://用户名.github.io" target="_blank" rel="noopener">https://用户名.github.io</a></p><h2 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h2><ul><li>进入博客根目录 <code>hexo new &quot;My New Post&quot;  #新建博客文章</code>  </li><li>使用 Markdown 编辑器编辑 source 文件夹下的 My New Post.md 文件<pre><code>hexo g   # 生成页面hexo d   # 部署发布</code></pre></li></ul><h2 id="常用hexo命令"><a href="#常用hexo命令" class="headerlink" title="常用hexo命令"></a>常用hexo命令</h2><pre><code>hexo new &quot;name&quot;       # 新建文章hexo new page &quot;name&quot;  # 新建页面hexo g                # 生成页面hexo d                # 部署hexo g -d             # 生成页面并部署hexo s                # 本地预览hexo clean            # 清除缓存和已生成的静态文件hexo help             # 帮助</code></pre><h2 id="绑定域名（可选）"><a href="#绑定域名（可选）" class="headerlink" title="绑定域名（可选）"></a>绑定域名（可选）</h2><ul><li>去<a href="https://www.namesilo.com/index.php" target="_blank" rel="noopener">Namesilo</a>网站购买，优惠码<code>okoff</code>   </li><li>进入domain manager， 点击蓝色小球配置DNS   </li><li>删除所有自带记录，新建CNAME类型记录，内容如下, NAMESILO设置完毕   <pre><code>  HOSTNAME： www  TYPE: CNAME  ADDRESS/VALUE: username.github.io  DISTANCE/PRIO: NA  TTL: 3600</code></pre></li><li>在博客根目录<code>source</code>文件夹下新建CNAME文件，去掉.txt后缀，变成无后缀名文件，文件内容为<code>www.yourdomainname.com</code>   </li><li>登录github，进入博客repository，点击设置，向下滚到Github Pages选项，此时custom domain一项应该自动变成<code>www.yourdomainname.com</code>, 勾选enforce https选项   </li><li>至此，全部设置完成，可以开始用<a href="https://www.yourdomainname.com" target="_blank" rel="noopener">https://www.yourdomainname.com</a>来访问了.</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows安装gcc，gfortran</title>
      <link href="/2019/09/12/fortran-windows-an-zhuang-gcc-gfortran/"/>
      <url>/2019/09/12/fortran-windows-an-zhuang-gcc-gfortran/</url>
      
        <content type="html"><![CDATA[<ul><li><p>Download mingw-64: <a href="http://mingw-w64.org/doku.php/download" target="_blank" rel="noopener">http://mingw-w64.org/doku.php/download</a>    </p></li><li><p>Install: posix, seh    </p></li><li><p>Set environment variables:    </p><blockquote><p>open: my cumputer – properties – advanced system setting – advanced – environment variables – system variables </p><p>add: C:\Program Files\mingw-w64\x86_64-8.1.0-posix-seh-rt_v6-rev0\mingw64\bin;   </p></blockquote></li><li><p>Check edition: gfortran -v; gcc -v</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Fortran </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Fortran </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ABAQUS计算Cavitation</title>
      <link href="/2019/09/12/abaqus-ji-suan-cavitation/"/>
      <url>/2019/09/12/abaqus-ji-suan-cavitation/</url>
      
        <content type="html"><![CDATA[<ul><li><p>In abaqus CAE, create node set for the whole acoustic model in the ‘tools’ manu, then create another node set under ‘assembly-sets’ for the acoustic model with the same set name</p></li><li><p>In the .inp file, type in the command below before the boundary condition.   </p><blockquote><p>‘Flset1’ is the nodel set name<br>0.0 is the cavitation pressure<br>the next three numbers are the coordinates of the reference node which are x, y, z respectively<br>```</p></blockquote></li><li><p>Initial Conditions, TYPE=Acoustic Static Pressure<br>FlSet1, 0.0, 125,12.5,-6E+03</p><pre><code></code></pre></li><li><p>In the .inp file, type in the command below before the acoustic media density    </p><blockquote><p>0.0 means cavitation pressure<br>```</p></blockquote></li><li><p>Acoustic Medium, Cavitation Limit</p></li></ul><p>0.0,</p><pre><code>* Example</code></pre><p><em>Material, name=FS<br>*Density<br> 1.3913e-09,<br>*Elastic, type=ENGINEERING CONSTANTS<br>17000.,17000., 7480.,  0.13,  0.28,  0.28, 4000., 1730.<br> 1730.,<br>*Material, name=LIQUID<br>*Acoustic Medium<br>2280.,<br>*Acoustic Medium, Cavitation Limit<br>0.0,<br>*Density<br> 1.024e-09,<br>*</em><br>** PHYSICAL CONSTANTS<br>**<br><em>Acoustic Wave Formulation, type=TOTAL WAVE<br>*</em><br><em>Initial Conditions, TYPE=Acoustic Static Pressure<br>FlSet1, 0.0, 125,12.5,-6E+03<br>*</em> BOUNDARY CONDITIONS<br>**<br>** Name: FIXED Type: Symmetry/Antisymmetry/Encastre<br><em>Boundary<br>_PickedSet18, ENCASTRE<br>*</em> Name: X_SYMMETRY Type: Symmetry/Antisymmetry/Encastre<br>*Boundary<br>_PickedSet20, XSYMM</p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> ABAQUS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ABAQUS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ABAQUS基本命令 (持续更新）</title>
      <link href="/2019/09/12/abaqus-ji-ben-ming-ling/"/>
      <url>/2019/09/12/abaqus-ji-ben-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="命令行运行Abaqus"><a href="#命令行运行Abaqus" class="headerlink" title="命令行运行Abaqus"></a>命令行运行Abaqus</h1><ul><li><code>abq6132 j=Job-1 user=vumat.for int</code>   </li><li>Needs Intel parallel studio &amp; Visual Studio 2010</li></ul>]]></content>
      
      
      <categories>
          
          <category> ABAQUS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ABAQUS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
